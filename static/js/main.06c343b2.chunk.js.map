{"version":3,"sources":["decompose.js","possibleResults.js","hiddenNumber.js","index.js"],"names":["concat","element","array","length","map","e","decompose","number","substr","rawDecomposition","filter","decomposition","some","str","test","possibleResults","results","indexesUsedForResult","operations","i","j","add","push","sub","Math","abs","len","max","min","recontructHost","usedIndexes","newHost","doesItStartWith","potentialStart","target","answer","newTarget","ReactDOM","render","useState","host","state","setState","onChange","name","value","result","hiddenNumber","usedLast","reset","decompositions","d","r","toSaveorNotToSave","indexes","indexOf","o","usedLastHere","success","steps","type","autoFocus","className","step","index","key","document","getElementById"],"mappings":"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","file":"static/js/main.06c343b2.chunk.js","sourcesContent":["// precondition : array has 2 dimensions\n// concat adds element in the beginning of each array component\nfunction concat(element, array) {\n  if (array.length === 0) {\n    return [[element]];\n  }\n\n  return array.map(e => [element, ...e]);\n}\n\nfunction rawDecomposition(number) {\n  if (number.length === 0) {\n    return [];\n  }\n\n  if (number.length === 1) {\n    //  console.log(\"case 1 : \", [[number]]);\n    return [[number]];\n  }\n\n  if (number.length === 2) {\n    //console.log(\"case 2 : \", [[number[0], number[1]], [number]]);\n    return [[number[0], number[1]], [number]];\n  }\n\n  if (number.length === 3) {\n    return [\n      [number.substr(0, 1), number.substr(1, 1), number.substr(2, 1)],\n      [number.substr(0, 1), number.substr(1, 2)],\n      [number.substr(0, 2), number.substr(2, 1)],\n      [number]\n    ];\n  }\n\n  return [\n    ...concat(number.substr(0, 1), decompose(number.substr(1))),\n    ...concat(number.substr(0, 2), decompose(number.substr(2))),\n    ...concat(number.substr(0, 3), decompose(number.substr(3))),\n    ...concat(number.substr(0, 4), decompose(number.substr(4)))\n  ];\n}\n\nexport default function decompose(number) {\n  const decompositions = rawDecomposition(number);\n  return decompositions.filter(decomposition => {\n    return !decomposition.some(str => /0+(.+)/.test(str));\n  });\n}\n","export default function possibleResults(decomposition) {\n  const results = [];\n  const indexesUsedForResult = [];\n  const operations = [];\n\n  // This loop computes all possible combinations between two elements of decomposition\n  for (let i = 0; i < decomposition.length - 1; i++) {\n    const j = i + 1;\n    const add = 1 * decomposition[i] + 1 * decomposition[j];\n    results.push(`${add}`);\n    indexesUsedForResult.push([i, j]);\n    operations.push(`(${decomposition[i]} + ${decomposition[j]} = ${add})`);\n\n    const sub = Math.abs(1 * decomposition[i] - 1 * decomposition[j]);\n    results.push(`${sub}`);\n    indexesUsedForResult.push([i, j]);\n    operations.push(`(${decomposition[i]} - ${decomposition[j]} = ${sub})`);\n  }\n\n  // At this point results only contain combinations of two elements of decomposition\n  const len = results.length;\n\n  //This loop computes all possible results between a combination and an element of decomposition\n  for (let i = 0; i < len; i++) {\n    const j = Math.max(...indexesUsedForResult[i]) + 1;\n    if (j < decomposition.length) {\n      const add = 1 * results[i] + 1 * decomposition[j];\n      results.push(`${add}`);\n      indexesUsedForResult.push([...indexesUsedForResult[i], j]);\n      operations.push(\n        `${operations[i]} (${results[i]} + ${decomposition[j]} = ${add})`\n      );\n\n      const sub = Math.abs(1 * results[i] - 1 * decomposition[j]);\n      results.push(`${sub}`);\n      indexesUsedForResult.push([...indexesUsedForResult[i], j]);\n      operations.push(\n        `${operations[i]} (${results[i]} - ${decomposition[j]} = ${sub})`\n      );\n    }\n  }\n\n  // This loop computes all possible results that are combinations between two combinations\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (\n        Math.max(...indexesUsedForResult[i]) + 1 ===\n        Math.min(...indexesUsedForResult[j])\n      ) {\n        const add = 1 * results[i] + 1 * results[j];\n        results.push(`${add}`);\n        indexesUsedForResult.push([\n          ...indexesUsedForResult[i],\n          ...indexesUsedForResult[j]\n        ]);\n        operations.push(\n          `${operations[i]} ${operations[j]} (${results[i]} + ${results[j]} = ${add})`\n        );\n\n        const sub = Math.abs(1 * results[i] - 1 * results[j]);\n        results.push(`${sub}`);\n        indexesUsedForResult.push([\n          ...indexesUsedForResult[i],\n          ...indexesUsedForResult[j]\n        ]);\n        operations.push(\n          `${operations[i]} ${operations[j]} (${results[i]} - ${results[j]} = ${sub})`\n        );\n      }\n    }\n  }\n\n  return { results, indexesUsedForResult, operations };\n}\n","import decompose from \"./decompose\";\nimport possibleResults from \"./possibleResults\";\n\n// starts from a decomposition of a host and used indexes from the previous step\n// and recontructs the new host to work with\nfunction recontructHost(decomposition, usedIndexes) {\n  let newHost = \"\";\n  for (let i of usedIndexes) {\n    newHost += decomposition[i];\n  }\n  for (\n    let i = usedIndexes[usedIndexes.length - 1] + 1;\n    i < decomposition.length;\n    i++\n  ) {\n    newHost += decomposition[i];\n  }\n  return newHost;\n}\n\n// doesItStartWith verifies if target starts with potentialStart\n// In which case, answer is true and newTarget is the remaining part of target\n// Otherwise, answer is false and newTarget is empty\nexport function doesItStartWith(potentialStart, target) {\n  let answer = target.substr(0, potentialStart.length) === potentialStart;\n  let newTarget = \"\";\n  if (answer) {\n    newTarget = target.substr(potentialStart.length);\n  }\n  return { answer, newTarget };\n}\n\nexport default function hiddenNumber(target, host, usedLast, reset = false) {\n  if (reset) {\n    usedLast = false;\n  }\n\n  let decompositions = decompose(host);\n\n  for (let d of decompositions) {\n    let { results, indexesUsedForResult, operations } = possibleResults(d);\n    if (reset) {\n      const toSaveorNotToSave = indexesUsedForResult.map(\n        indexes => indexes.indexOf(0) >= 0\n      );\n      indexesUsedForResult = indexesUsedForResult.filter(\n        (indexes, i) => toSaveorNotToSave[i]\n      );\n      results = results.filter((r, i) => toSaveorNotToSave[i]);\n      operations = operations.filter((o, i) => toSaveorNotToSave[i]);\n    }\n\n    for (let r in results) {\n      let usedLastHere = usedLast;\n      let { answer, newTarget } = doesItStartWith(results[r], target);\n      if (answer) {\n        if (!usedLastHere && newTarget === \"\") {\n          usedLastHere =\n            indexesUsedForResult[r][indexesUsedForResult[r].length - 1] ===\n            d.length - 1;\n        }\n        // console.log({ usedLastHere, d, indexes: indexesUsedForResult[r] });\n        // console.log({\n        //   host,\n        //   step: operations[r],\n        //   potentialStart: results[r],\n        //   target,\n        //   newTarget,\n        //   indexes: indexesUsedForResult[r]\n        // });\n\n        if (newTarget === \"\" && usedLastHere) {\n          return { success: true, steps: [operations[r]] };\n        }\n        let newHost = recontructHost(d, indexesUsedForResult[r]);\n        let { success, steps } = hiddenNumber(newTarget, newHost, usedLastHere);\n        if (success && steps.indexOf(operations[r]) < 0) {\n          return { success, steps: [operations[r], ...steps] };\n        }\n      }\n    }\n  }\n\n  return { success: false, steps: [] };\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n//import \"./test.js\";\n\nimport \"./styles.css\";\n\nimport hiddenNumber from \"./hiddenNumber\";\n\nfunction App() {\n  const [state, setState] = useState({ target: \"\", host: \"\" });\n\n  const onChange = ({ target: { name, value } }) => {\n    setState({ ...state, [name]: value });\n  };\n\n  const result =\n    state.target &&\n    state.host &&\n    hiddenNumber(state.target, state.host, false, true);\n  return (\n    <div>\n      <h1>Find the target</h1>\n      <div>\n        <label>\n          <span>Target:</span>\n          <input\n            type=\"number\"\n            name=\"target\"\n            value={state.target}\n            onChange={onChange}\n            autoFocus={true}\n          />\n        </label>\n        <label>\n          <span>Host:</span>\n          <input\n            type=\"number\"\n            name=\"host\"\n            value={state.host}\n            onChange={onChange}\n          />\n        </label>\n        {result && (\n          <div className={`result ${result.success && \"SUCCESS\"}`}>\n            <span>{result.success ? \"SUCCESS\" : \"FAIL\"}</span>\n            {result.success && (\n              <ol>\n                {result.steps.map((step, index) => (\n                  <li key={index}>\n                    <pre>{step}</pre>\n                  </li>\n                ))}\n              </ol>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n//\n// console.clear();\n//\n// const tests = [\n//   // [\"2131\", \"39422\"],\n//   // [\"419\", \"10540\"],\n//   // [\"441\", \"10540\"],\n//   // [\"441\", \"10934\"],\n//   // [\"518\", \"10934\"],\n//   // [\"325\", \"6811\"],\n//   // [\"333\", \"10061\"],\n//   // [\"596\", \"5433\"],\n//   // [\"517\", \"11034\"],\n//   // [\"5\", \"12\"],\n//   // [\"52\", \"12\"],\n//   [\"10\", \"100\"],\n//   [\"100\", \"10\"]\n//   // [\"12\", \"5\"]\n// ];\n//\n// tests.forEach(([target, host]) => {\n//   let result = hiddenNumber(target, host);\n//   console.log({ host, target, result });\n// });\n"],"sourceRoot":""}